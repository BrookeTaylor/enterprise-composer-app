{"ast":null,"code":"// Add an import statement for the “of” operator from rxjs\nimport { of } from 'rxjs'; // Add an import statement for the rxjs map operator\n\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let ComposerService = /*#__PURE__*/(() => {\n  class ComposerService {\n    // Remove the fullName and genre fields from the\n    // constructor’s parameters\n    constructor() {\n      // Remove the code in the body of the constructor\n      // In the class’s constructor, populate the composer’s array\n      // with 5 composer objects\n      this.composers = [{\n        composerId: 100,\n        fullName: 'Ludwig Beethoven',\n        genre: 'Classical'\n      }, {\n        composerId: 101,\n        fullName: 'Wolfgang Mozart',\n        genre: 'Classical'\n      }, {\n        composerId: 102,\n        fullName: 'Johannes Brahms',\n        genre: 'Classical'\n      }, {\n        composerId: 103,\n        fullName: 'Richard Wagner',\n        genre: 'Classical'\n      }, {\n        composerId: 104,\n        fullName: 'Peter Tchaikovsky',\n        genre: 'Classical'\n      }];\n    } // Update the return type of the getComposer function to an Observable\n    // array of IComposer objects\n\n\n    getComposers() {\n      // Return the composers array\n      return of(this.composers);\n    }\n\n    getComposer(composerId) {\n      // Loop over the composer array and return the object that matches\n      // the passed-in composerId\n      for (let composer of this.composers) if (composer.composerId === composerId) {\n        return composer;\n      }\n    } // Add a new function called filterComposers(name: string) and\n    // set the return type of Observable<IComposer[]>\n\n\n    filterComposers(name) {\n      /**\r\n       *\r\n       * In the body of the function, return an Observable array of all Composer\r\n       * objects containing the parameter name in their fullName.  We will be using\r\n       * the pipe, map, and filter functions\r\n       *\r\n       * The pipe() operator is a built-in function that allows us to chain\r\n       * functions together\r\n       *\r\n       * The map() function is used when we want to return a new array of objects.\r\n       *\r\n       * And, the filter() function, as the name suggests, filters an array of data.\r\n       *\r\n       */\n      return of(this.composers).pipe(map(composers => composers.filter(composer => composer.fullName.toLowerCase().indexOf(name) > -1)));\n    }\n\n  }\n\n  ComposerService.ɵfac = function ComposerService_Factory(t) {\n    return new (t || ComposerService)();\n  };\n\n  ComposerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ComposerService,\n    factory: ComposerService.ɵfac,\n    providedIn: 'root'\n  });\n  return ComposerService;\n})();","map":null,"metadata":{},"sourceType":"module"}